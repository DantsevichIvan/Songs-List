{"version":3,"sources":["style/search.module.css","style/content.module.css","style/paginator.module.css","style/quartity.module.css","style/container.module.css","style/searchBar.module.css","Component/Content.js","Component/Select.js","Component/Search.js","Component/Container.js","Component/Paginator.js","Component/Quartity.js","Component/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Content","arrSongs","className","styles","wrapper","container","homeTr","width","map","el","content","key","id","nameSinger","song","ganre","year","Select","arr","sort","selects","name","select","onChange","event","option","value","Search","allSongs","updateSort","useState","sortArr","data","setData","useEffect","type","target","sorted","slice","call","a","b","Container","Paginator","pages","currentPage","changeCurrentPage","cn","selectedPage","page","onClick","e","Quartity","quartity","currentAmount","changeQuartityPage","selectedAmount","SearchBar","term","update","placeholder","toLowerCase","filter","includes","App","setArrSongs","setAllSongs","setPages","setCurrentPage","setCurrentAmount","getSongs","useCallback","fetch","response","json","allData","countPage","songs","pagesCount","Math","ceil","length","sumPages","i","push","initialArr","pageCount","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6edabbec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"search_container__3obQU\",\"selects\":\"search_selects__1HJ0i\",\"select\":\"search_select__2vG1h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"content_wrapper__GndHN\",\"container\":\"content_container__26EEl\",\"homeTr\":\"content_homeTr__1q48u\",\"content\":\"content_content__3HHzt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"paginator_container__2DheX\",\"page\":\"paginator_page__JMSVl\",\"selectedPage\":\"paginator_selectedPage__eS9wB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"quartity_container__8eK1U\",\"quartity\":\"quartity_quartity__3idRz\",\"selectedAmount\":\"quartity_selectedAmount__3CtwT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"container_container__3EhA7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"searchBar_container__F1rq6\"};","import React from \"react\";\r\nimport styles from \"../style/content.module.css\"\r\n\r\n\r\nexport const Content = ({arrSongs}) => {\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <table className={styles.container}>\r\n                <tbody>\r\n                <tr className={styles.homeTr}>\r\n                    <th width={100}>Singer</th>\r\n                    <th width={200}>Song</th>\r\n                    <th width={80}>Ganre</th>\r\n                    <th width={50}>Year</th>\r\n                </tr>\r\n\r\n                {\r\n                    arrSongs.map((el) => {\r\n                        return (\r\n                            <tr className={styles.content} key={el.id}>\r\n                                <td>{el.nameSinger}</td>\r\n                                <td>{el.song}</td>\r\n                                <td>{el.ganre}</td>\r\n                                <td>{el.year}</td>\r\n                            </tr>\r\n                        )\r\n                    })\r\n                }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n\r\n    )\r\n};","import styles from \"../style/search.module.css\";\r\nimport React from \"react\";\r\n\r\nexport const Select = ({arr, sort}) => {\r\n    return (\r\n        <div className={styles.selects}>\r\n            <span>Sort:</span>\r\n            <select name=\"\" id=\"\" className={styles.select} onChange={event => sort(event)}>\r\n                {\r\n                    arr.map((option) => {\r\n                        return (\r\n                            <option value={option} key={option} onChange={() => sort(option)}>{option}</option>\r\n                        )\r\n                    })\r\n                }\r\n            </select>\r\n        </div>\r\n    )\r\n};","import React, {useEffect, useState} from \"react\";\r\nimport styles from \"../style/search.module.css\"\r\nimport {Select} from \"./Select\";\r\n\r\n\r\nexport const Search = ({allSongs, updateSort}) => {\r\n    const [sortArr, setSortArr] = useState(['All', 'nameSinger', 'song', 'ganre', 'year']);\r\n    const [data, setData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setData(allSongs)\r\n    }, [allSongs]);\r\n\r\n    const sort = (event) => {\r\n        const type = event.target.value;\r\n\r\n\r\n        const sorted = [].slice.call(data).sort((a, b) => {\r\n\r\n            if (a[type] < b[type]) {\r\n                return -1\r\n            }\r\n            if (a[type] > b[type]) {\r\n                return 1\r\n            }\r\n            return 0\r\n        });\r\n\r\n        updateSort({\r\n            data: sorted,\r\n            type\r\n        })\r\n    };\r\n\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Select arr={sortArr} sort={sort}/>\r\n        </div>\r\n    )\r\n};","import React, {useState} from \"react\";\r\nimport {Content} from \"./Content\";\r\nimport {Search} from \"./Search\";\r\nimport styles from \"../style/container.module.css\"\r\n\r\n\r\nexport const Container = ({arrSongs, allSongs,updateSort}) => {\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Content arrSongs={arrSongs} />\r\n            <Search\r\n                allSongs={allSongs}\r\n                updateSort={updateSort}/>\r\n        </div>\r\n    )\r\n};","import React from \"react\";\r\nimport styles from \"../style/paginator.module.css\";\r\nimport cn from 'classnames'\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nexport const Paginator = ({pages, currentPage, changeCurrentPage}) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            {\r\n                pages.map((el) => {\r\n                    return (\r\n                        <span className={\r\n                            cn({[styles.selectedPage]: currentPage === el}, styles.page)}\r\n                              key={el}\r\n                              onClick={e => changeCurrentPage(el)}\r\n                        >{el}</span>\r\n                    )\r\n                })}\r\n        </div>\r\n    )\r\n};","import React from \"react\";\r\nimport styles from \"../style/quartity.module.css\";\r\nimport cn from \"classnames\";\r\n\r\nexport const Quartity =({quartity,currentAmount,changeQuartityPage}) =>{\r\n    return(\r\n        <div className={styles.container}>\r\n            {\r\n                quartity.map((el) => {\r\n                    return (\r\n                        <span\r\n                            className={cn({[styles.selectedAmount]:currentAmount === el},\r\n                                styles.quartity)}\r\n                            key={el}\r\n                        onClick={event => changeQuartityPage(el) }>\r\n                            {el}</span>\r\n                    )\r\n                })}\r\n        </div>\r\n    )\r\n};","import React from \"react\";\r\nimport styles from \"../style/searchBar.module.css\"\r\n\r\n\r\nexport const SearchBar = ({data, term, update}) => {\r\n\r\n    const dataSearch = e => {\r\n        const value = e.target.value.toLowerCase();\r\n\r\n        const filter = data.filter(song => {\r\n            return song[term].toLowerCase().includes(value)\r\n        });\r\n        update({\r\n            data: filter,\r\n            term: value\r\n        })\r\n    };\r\n\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <input type=\"text\"\r\n                   placeholder={`Search ${term}`}\r\n                   onChange={dataSearch}\r\n            />\r\n        </div>\r\n    )\r\n};","import React, {useCallback, useEffect, useState} from 'react';\nimport {Container} from \"./Component/Container\";\nimport {Paginator} from \"./Component/Paginator\";\nimport {Quartity} from \"./Component/Quartity\";\nimport {SearchBar} from \"./Component/SearchBar\";\nimport './App.css';\n\nfunction App() {\n    const [arrSongs, setArrSongs] = useState([]);\n    const [allSongs, setAllSongs] = useState([]);\n    const [pages, setPages] = useState([]);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [currentAmount, setCurrentAmount] = useState(5);\n    const [quartity] = useState([5, 10, 25, 50, 100]);\n\n\n    const getSongs = useCallback(async () => {\n        try {\n            const response = await fetch(`http://localhost:3001/songs`);\n            const data = await fetch(`http://localhost:3001/songs?_page=${currentPage}&_limit=${currentAmount}`);\n            const allData = await response.json();\n            countPage(allData);\n            const songs = await data.json();\n            await setAllSongs(allData);\n            await setArrSongs(songs);\n        } catch (e) {\n        }\n    }, [currentPage, currentAmount]);\n\n    const countPage = (allData) => {\n        const pagesCount = Math.ceil(allData.length / currentAmount);\n        const sumPages = [];\n        for (let i = 1; i <= pagesCount; i++) {\n            sumPages.push(i)\n        }\n        setPages(sumPages)\n    };\n\n    useEffect(() => {\n        getSongs();\n    }, [getSongs]);\n\n    const changeCurrentPage = (page) => {\n        setCurrentPage(page);\n        setArrSongs([])\n    };\n    const changeQuartityPage = (pageCount) => {\n        setCurrentAmount(pageCount);\n        setArrSongs([])\n    };\n\n    function initialArr(data) {\n        return data.slice(0, 5);\n    }\n\n    const update = ({data, term}) => {\n        if (term === '') {\n            setArrSongs(initialArr(data));\n            setCurrentPage(1)\n        } else {\n            setArrSongs(data);\n        }\n    };\n\n    const updateSort = ({data, type}) => {\n        if (type === 'All') {\n            setArrSongs(initialArr(data));\n            setCurrentPage(1)\n        } else {\n            setArrSongs(data);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <div className=\"Container\">\n                <Container\n                    arrSongs={arrSongs}\n                    allSongs={allSongs}\n                    updateSort={updateSort}/>\n            </div>\n            <div className=\"SearchBar\">\n                <SearchBar data={allSongs} term={'nameSinger'} update={update}/>\n                <SearchBar data={allSongs} term={'ganre'} update={update}/>\n                <SearchBar data={allSongs} term={'year'} update={update}/>\n            </div>\n            <div className=\"Navigation\">\n                <Paginator pages={pages} currentPage={currentPage} changeCurrentPage={changeCurrentPage}/>\n                <Quartity quartity={quartity} currentAmount={currentAmount} changeQuartityPage={changeQuartityPage}/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}